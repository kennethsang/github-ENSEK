{
	"info": {
		"_postman_id": "7e5d1254-aeba-40d0-b2cc-28035ca50ac2",
		"name": "GitHub ENSEK API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25627847"
	},
	"item": [
		{
			"name": "Reset the Test Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 401\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Test data reset message is correct\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.message).to.eql(\"Test data reset successfully.\");\r",
							"    });\r",
							"}\r",
							"\r",
							"if (pm.response.code === 401) {\r",
							"    pm.test(\"Unauthorized access message is correct\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.message).to.eql(\"Unauthorized access.\");\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "aeiouAABC",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"username\": \"test\",\r\n   \"password\": \"testing\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://qacandidatetest.ensek.io/ENSEK/reset",
					"protocol": "https",
					"host": [
						"qacandidatetest",
						"ensek",
						"io"
					],
					"path": [
						"ENSEK",
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy a Quantity of Each Fuel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct energy id and quantity\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.request.body.id);\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.request.body.quantity);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"quantity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://qacandidatetest.ensek.io/ENSEK/buy/4/1",
					"protocol": "https",
					"host": [
						"qacandidatetest",
						"ensek",
						"io"
					],
					"path": [
						"ENSEK",
						"buy",
						"4",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify each order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response.status);\r",
							"\r",
							"pm.test(\"Verify Success\", () => {\r",
							"    pm.expect(response.status).to.eql(\"Unable to Verify\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://qacandidatetest.ensek.io/ENSEK/orders/82a987aa-2fff-4331-bcf8-fc3a31c387ac",
					"protocol": "https",
					"host": [
						"qacandidatetest",
						"ensek",
						"io"
					],
					"path": [
						"ENSEK",
						"orders",
						"82a987aa-2fff-4331-bcf8-fc3a31c387ac"
					]
				}
			},
			"response": []
		},
		{
			"name": "Orders Before Today",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let orders = pm.response.json();\r",
							"let today = new Date();\r",
							"let count = orders.filter(order => new Date(order.timestamp) < today).length;\r",
							"console.log(`Orders before today: ${count}`);\r",
							"pm.test(\"Number of orders before today\", () => {\r",
							"  pm.expect(count).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://qacandidatetest.ensek.io/ENSEK/orders",
					"protocol": "https",
					"host": [
						"qacandidatetest",
						"ensek",
						"io"
					],
					"path": [
						"ENSEK",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Energy",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://qacandidatetest.ensek.io/ENSEK/energy",
					"protocol": "https",
					"host": [
						"qacandidatetest",
						"ensek",
						"io"
					],
					"path": [
						"ENSEK",
						"energy"
					]
				}
			},
			"response": []
		},
		{
			"name": "Exceed Max Qty (Boundary Case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API returns error for excessive energy quantity\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Quantity exceeds the maximum allowed limit\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 4,\r\n  \"quantity\": 1000000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://qacandidatetest.ensek.io/ENSEK/buy",
					"protocol": "https",
					"host": [
						"qacandidatetest",
						"ensek",
						"io"
					],
					"path": [
						"ENSEK",
						"buy"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Energy Purchase (Negative Case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API returns error for invalid energy type\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Invalid energy type\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 999,\r\n    \"quantity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://qacandidatetest.ensek.io/ENSEK/buy/999/1",
					"protocol": "https",
					"host": [
						"qacandidatetest",
						"ensek",
						"io"
					],
					"path": [
						"ENSEK",
						"buy",
						"999",
						"1"
					]
				}
			},
			"response": []
		}
	]
}